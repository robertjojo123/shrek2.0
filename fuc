local modem = peripheral.find("modem")
local monitor = peripheral.find("monitor")

if not modem then
    error("No modem found! Attach a modem to use Rednet.", 0)
end

if not monitor then
    error("No monitor found! Attach a monitor to use this script.", 0)
end

rednet.open(peripheral.getName(modem))  -- Open the modem for communication

monitor.setTextScale(0.5)  -- Adjust text scale for large monitors

-- Set base video URLs per quadrant
local baseURL = "https://raw.githubusercontent.com/robertjojo123/shrek2.0/refs/heads/main/video_part_"

local quadrant = os.getComputerLabel() -- Get the computer's name
local quadrantIndex = tonumber(string.sub(quadrant, -1))  -- Extracts 0,1,2,3

if quadrantIndex == nil or quadrantIndex < 0 or quadrantIndex > 3 then
    error("Error: This computer's label must be 'comp0', 'comp1', 'comp2', or 'comp3'.", 0)
end

local firstVideoDuration = 38000  -- 38s
local otherVideoDuration = 45000  -- 45s
local frameInterval = 200          -- 200ms per frame
local linesPerFrame = 40           -- Each frame consists of 40 lines
local globalStartTime = nil        -- Stores when the movie officially starts

function getMovieURL(index)
    local url = baseURL .. index .. "_q" .. quadrantIndex .. ".nfv"
    print("Generated URL:", url) -- Debugging
    return url
end

function downloadVideo(index, filename)
    local url = getMovieURL(index)
    print("Attempting to download:", url)

    local response = http.get(url)
    if response then
        local file = fs.open(filename, "wb")
        file.write(response.readAll())
        file.close()
        response.close()
        print("Downloaded:", filename)
        return true
    else
        print("Failed to download:", filename)
    end
    return false
end

function loadVideo(videoFile)
    local videoData = {}
    for line in io.lines(videoFile) do
        table.insert(videoData, line)
    end
    local resolution = { videoData[1]:match("(%d+) (%d+)") }
    table.remove(videoData, 1)
    return videoData, resolution
end

function playVideo(videoFile, videoStartTime, videoIndex)
    local videoData, resolution = loadVideo(videoFile)
    local frameIndex = 1
    local videoEndTime = videoStartTime + (videoIndex == 1 and firstVideoDuration or otherVideoDuration)
    local frameStartTime = os.epoch("utc")

    -- **Sync Correction Based on Lost Time**
    local expectedOffset = os.epoch("utc") - globalStartTime
    local frameCorrection = math.floor(expectedOffset / frameInterval)
    frameIndex = frameIndex + (frameCorrection * linesPerFrame)

    function nextFrame()
        local currentTime = os.epoch("utc")
        local elapsedTime = currentTime - videoStartTime
        local expectedFrame = math.floor(elapsedTime / frameInterval) * linesPerFrame

        if expectedFrame > frameIndex then
            frameIndex = expectedFrame
        end

        -- Draw Frame
        local frame = {}
        for i = 1, resolution[2] do
            if frameIndex + i > #videoData then
                break
            end
            table.insert(frame, videoData[frameIndex + i])
        end
        if #frame > 0 then
            monitor.clear()
            local imageData = paintutils.parseImage(table.concat(frame, "\n"))
            monitor.setBackgroundColor(colors.black)
            monitor.clear()
            term.redirect(monitor)
            paintutils.drawImage(imageData, 1, 1)
            term.redirect(term.native()) -- Reset to normal terminal after painting

        end

        frameIndex = frameIndex + resolution[2]

        -- Stop playing if past the last frame
        if frameIndex > #videoData then
            return false
        end

        -- **Frame Timing (to catch up if needed)**
        local elapsedFrameTime = os.epoch("utc") - frameStartTime
        frameStartTime = os.epoch("utc")
        local sleepTime = (frameInterval - elapsedFrameTime) / 1000
        if sleepTime < 0 then
            sleepTime = 0
        end

        os.sleep(sleepTime)
        return true
    end

    while os.epoch("utc") < videoEndTime do
        if not nextFrame() then
            break
        end
    end
end

function playMovie()
    local videoIndex = 1
    globalStartTime = os.epoch("utc")

    monitor.setBackgroundColor(colors.black)
    monitor.clear()
    
    print("Preparing to play movie...")
    os.sleep(0.75)  -- **750ms delay before first video starts**
    globalStartTime = globalStartTime + 750  -- **Adjust global elapsed time**
    local videoStartTime = os.epoch("utc")

    parallel.waitForAny(
        function()
            while true do
                print("Downloading video part:", videoIndex)
                if not downloadVideo(videoIndex, "/current_video.nfv") then 
                    print("No more video parts available, stopping playback.")
                    break 
                end

                local nextIndex = videoIndex + 1
                local nextFile = "/next_video.nfv"

                print("Pre-downloading next part:", nextIndex)
                downloadVideo(nextIndex, nextFile)

                print("Playing video part:", videoIndex)
                playVideo("/current_video.nfv", videoStartTime, videoIndex)
                fs.delete("/current_video.nfv")

                if fs.exists(nextFile) then
                    fs.move(nextFile, "/current_video.nfv")
                    videoIndex = nextIndex
                    videoStartTime = globalStartTime + firstVideoDuration + ((videoIndex - 2) * otherVideoDuration)
                else
                    break
                end
            end
        end
    )
end

rednet.open(peripheral.getName(modem))  -- Ensure modem is open
print("Waiting for movie start signal...")

while true do
    local senderID, message = rednet.receive()
    if message == "play_SHREK" then
        globalStartTime = os.epoch("utc") + 2000 -- **Ensure sync, delay all PCs by 2s**
        print("Received play signal from " .. senderID .. "! Syncing start time...")
        
        -- âœ… **Fix: Ensure Start Time Doesn't Get Stuck**
        local syncTime = globalStartTime
        while os.epoch("utc") < syncTime do
            os.sleep(0.05)
        end
        
        print("Starting movie playback now...")
        playMovie()
    end
end
